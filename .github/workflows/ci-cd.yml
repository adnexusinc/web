name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Permissions required for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Prevent concurrent deployments
concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  # Job 1: Install dependencies with caching
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [24]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

  # Job 2: Run linter
  lint:
    name: Run ESLint
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [24]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies (if cache miss)
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # Job 3: Run tests with coverage
  test:
    name: Run Tests with Coverage
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [24]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies (if cache miss)
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: matrix.node-version == 18
        with:
          name: coverage-report-node-${{ matrix.node-version }}
          path: coverage/
          retention-days: 7

  # Job 4: Build production bundle
  build:
    name: Build Production Bundle
    needs: [lint, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [24]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies (if cache miss)
        run: npm ci

      - name: Build production bundle
        run: npm run build

      - name: Verify build output
        run: |
          echo "‚úÖ Verifying build artifacts..."
          test -d dist
          test -f dist/index.html
          echo "‚úÖ Build verification complete"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == 18
        with:
          name: dist-node-${{ matrix.node-version }}
          path: dist/
          retention-days: 7

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        if: matrix.node-version == 18 && github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          path: ./dist

  # Job 5: Deploy to GitHub Pages (only on push to main)
  deploy:
    name: Deploy to GitHub Pages
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment summary
        run: |
          echo "‚úÖ Successfully deployed to GitHub Pages"
          echo "üåê URL: ${{ steps.deployment.outputs.page_url }}"
